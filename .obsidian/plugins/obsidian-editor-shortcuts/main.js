/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

var CASE;
(function (CASE) {
    CASE["UPPER"] = "upper";
    CASE["LOWER"] = "lower";
    CASE["TITLE"] = "title";
})(CASE || (CASE = {}));
const LOWERCASE_ARTICLES = ['the', 'a', 'an'];
var DIRECTION;
(function (DIRECTION) {
    DIRECTION["FORWARD"] = "forward";
    DIRECTION["BACKWARD"] = "backward";
})(DIRECTION || (DIRECTION = {}));
const MATCHING_BRACKETS = {
    '[': ']',
    '(': ')',
    '{': '}',
};
const MATCHING_QUOTES = {
    "'": "'",
    '"': '"',
    '`': '`',
};

const getLineStartPos = (line) => ({
    line,
    ch: 0,
});
const getLineEndPos = (line, editor) => ({
    line,
    ch: editor.getLine(line).length,
});
const getSelectionBoundaries = (selection) => {
    let { anchor: from, head: to } = selection;
    // in case user selects upwards
    if (from.line > to.line) {
        [from, to] = [to, from];
    }
    return { from, to };
};
const getLeadingWhitespace = (lineContent) => {
    const indentation = lineContent.match(/^\s+/);
    return indentation ? indentation[0] : '';
};
const isWordCharacter = (char) => /\w/.test(char);
const wordRangeAtPos = (pos, lineContent) => {
    let start = pos.ch;
    let end = pos.ch;
    while (start > 0 && isWordCharacter(lineContent.charAt(start - 1))) {
        start--;
    }
    while (end < lineContent.length && isWordCharacter(lineContent.charAt(end))) {
        end++;
    }
    return {
        anchor: {
            line: pos.line,
            ch: start,
        },
        head: {
            line: pos.line,
            ch: end,
        },
    };
};
const findPosOfNextCharacter = ({ editor, startPos, checkCharacter, searchDirection, }) => {
    let { line, ch } = startPos;
    let lineContent = editor.getLine(line);
    let matchFound = false;
    let matchedChar;
    if (searchDirection === DIRECTION.BACKWARD) {
        while (line >= 0) {
            // ch will initially be 0 if searching from start of line
            const char = lineContent.charAt(Math.max(ch - 1, 0));
            matchFound = checkCharacter(char);
            if (matchFound) {
                matchedChar = char;
                break;
            }
            ch--;
            // inclusive because (ch - 1) means the first character will already
            // have been checked
            if (ch <= 0) {
                line--;
                if (line >= 0) {
                    lineContent = editor.getLine(line);
                    ch = lineContent.length;
                }
            }
        }
    }
    else {
        while (line < editor.lineCount()) {
            const char = lineContent.charAt(ch);
            matchFound = checkCharacter(char);
            if (matchFound) {
                matchedChar = char;
                break;
            }
            ch++;
            if (ch >= lineContent.length) {
                line++;
                lineContent = editor.getLine(line);
                ch = 0;
            }
        }
    }
    return matchFound
        ? {
            match: matchedChar,
            pos: {
                line,
                ch,
            },
        }
        : null;
};

const insertLineAbove = (editor) => {
    const { line } = editor.getCursor();
    const startOfCurrentLine = getLineStartPos(line);
    editor.replaceRange('\n', startOfCurrentLine);
    editor.setSelection(startOfCurrentLine);
};
const insertLineBelow = (editor) => {
    const { line } = editor.getCursor();
    const endOfCurrentLine = getLineEndPos(line, editor);
    const indentation = getLeadingWhitespace(editor.getLine(line));
    editor.replaceRange('\n' + indentation, endOfCurrentLine);
    editor.setSelection({ line: line + 1, ch: indentation.length });
};
const deleteSelectedLines = (editor) => {
    const selections = editor.listSelections();
    if (selections.length === 0) {
        return;
    }
    const { from, to } = getSelectionBoundaries(selections[0]);
    if (to.line === editor.lastLine()) {
        // there is no 'next line' when cursor is on the last line
        editor.replaceRange('', getLineEndPos(from.line - 1, editor), getLineEndPos(to.line, editor));
    }
    else {
        editor.replaceRange('', getLineStartPos(from.line), getLineStartPos(to.line + 1));
    }
};
const joinLines = (editor) => {
    const { line } = editor.getCursor();
    const contentsOfNextLine = editor.getLine(line + 1).trimStart();
    const endOfCurrentLine = getLineEndPos(line, editor);
    const endOfNextLine = getLineEndPos(line + 1, editor);
    editor.replaceRange(contentsOfNextLine.length > 0
        ? ' ' + contentsOfNextLine
        : contentsOfNextLine, endOfCurrentLine, endOfNextLine);
    editor.setSelection(endOfCurrentLine);
};
const duplicateLine = (editor) => {
    const selections = editor.listSelections();
    if (selections.length === 0) {
        return;
    }
    const { from, to } = getSelectionBoundaries(selections[0]);
    const fromLineStart = getLineStartPos(from.line);
    const toLineEnd = getLineEndPos(to.line, editor);
    const contentsOfSelectedLines = editor.getRange(fromLineStart, toLineEnd);
    editor.replaceRange(contentsOfSelectedLines + '\n', fromLineStart);
};
const selectWord = (editor) => {
    const selections = editor.listSelections();
    const newSelections = selections.map((selection) => {
        const { from, to } = getSelectionBoundaries(selection);
        const selectedText = editor.getRange(from, to);
        // Do not modify selection if something is selected
        if (selectedText.length !== 0) {
            return selection;
        }
        else {
            return wordRangeAtPos(from, editor.getLine(from.line));
        }
    });
    editor.setSelections(newSelections);
};
const selectLine = (editor) => {
    const selections = editor.listSelections();
    if (selections.length === 0) {
        return;
    }
    const { from, to } = getSelectionBoundaries(selections[0]);
    const startOfCurrentLine = getLineStartPos(from.line);
    // if a line is already selected, expand the selection to the next line
    const startOfNextLine = getLineStartPos(to.line + 1);
    editor.setSelection(startOfCurrentLine, startOfNextLine);
};
const goToLineBoundary = (editor, boundary) => {
    if (boundary === 'start') {
        const { line } = editor.getCursor('from');
        editor.setSelection(getLineStartPos(line));
    }
    else {
        const { line } = editor.getCursor('to');
        editor.setSelection(getLineEndPos(line, editor));
    }
};
const transformCase = (editor, caseType) => {
    const originalSelections = editor.listSelections();
    let selectedText = editor.getSelection();
    // apply transform on word at cursor if nothing is selected
    if (selectedText.length === 0) {
        const pos = editor.getCursor('from');
        const { anchor, head } = wordRangeAtPos(pos, editor.getLine(pos.line));
        editor.setSelection(anchor, head);
        selectedText = editor.getRange(anchor, head);
    }
    if (caseType === CASE.TITLE) {
        editor.replaceSelection(
        // use capture group to join with the same separator used to split
        selectedText
            .split(/(\s+)/)
            .map((word, index, allWords) => {
            if (index > 0 &&
                index < allWords.length - 1 &&
                LOWERCASE_ARTICLES.includes(word.toLowerCase())) {
                return word.toLowerCase();
            }
            return word.charAt(0).toUpperCase() + word.substring(1).toLowerCase();
        })
            .join(''));
    }
    else {
        editor.replaceSelection(caseType === CASE.UPPER
            ? selectedText.toUpperCase()
            : selectedText.toLowerCase());
    }
    // restore original selection after replacing content
    if (originalSelections.length > 0) {
        const { anchor, head } = originalSelections[0];
        editor.setSelection(anchor, head);
    }
};
const expandSelection = ({ editor, openingCharacterCheck, matchingCharacterMap, }) => {
    let anchor = editor.getCursor('anchor');
    let head = editor.getCursor('head');
    // in case user selects upwards
    if (anchor.line >= head.line && anchor.ch > anchor.ch) {
        [anchor, head] = [head, anchor];
    }
    const newAnchor = findPosOfNextCharacter({
        editor,
        startPos: anchor,
        checkCharacter: openingCharacterCheck,
        searchDirection: DIRECTION.BACKWARD,
    });
    if (!newAnchor) {
        return;
    }
    const newHead = findPosOfNextCharacter({
        editor,
        startPos: head,
        checkCharacter: (char) => char === matchingCharacterMap[newAnchor.match],
        searchDirection: DIRECTION.FORWARD,
    });
    if (!newHead) {
        return;
    }
    editor.setSelection(newAnchor.pos, newHead.pos);
};
const expandSelectionToBrackets = (editor) => expandSelection({
    editor,
    openingCharacterCheck: (char) => /[\(\[\{]/.test(char),
    matchingCharacterMap: MATCHING_BRACKETS,
});
const expandSelectionToQuotes = (editor) => expandSelection({
    editor,
    openingCharacterCheck: (char) => /['"`]/.test(char),
    matchingCharacterMap: MATCHING_QUOTES,
});
const goToHeading = (app, editor, boundary) => {
    const file = app.metadataCache.getFileCache(app.workspace.getActiveFile());
    if (!file.headings || file.headings.length === 0) {
        return;
    }
    const { line } = editor.getCursor('from');
    let prevHeadingLine = 0;
    let nextHeadingLine = editor.lastLine();
    file.headings.forEach(({ position }) => {
        const { end: headingPos } = position;
        if (line > headingPos.line && headingPos.line > prevHeadingLine) {
            prevHeadingLine = headingPos.line;
        }
        if (line < headingPos.line && headingPos.line < nextHeadingLine) {
            nextHeadingLine = headingPos.line;
        }
    });
    editor.setSelection(boundary === 'prev'
        ? getLineEndPos(prevHeadingLine, editor)
        : getLineEndPos(nextHeadingLine, editor));
};

class CodeEditorShortcuts extends obsidian.Plugin {
    onload() {
        this.addCommand({
            id: 'insertLineAbove',
            name: 'Insert line above',
            hotkeys: [
                {
                    modifiers: ['Mod', 'Shift'],
                    key: 'Enter',
                },
            ],
            editorCallback: (editor) => insertLineAbove(editor),
        });
        this.addCommand({
            id: 'insertLineBelow',
            name: 'Insert line below',
            hotkeys: [
                {
                    modifiers: ['Mod'],
                    key: 'Enter',
                },
            ],
            editorCallback: (editor) => insertLineBelow(editor),
        });
        this.addCommand({
            id: 'deleteLine',
            name: 'Delete line',
            hotkeys: [
                {
                    modifiers: ['Mod', 'Shift'],
                    key: 'K',
                },
            ],
            editorCallback: (editor) => deleteSelectedLines(editor),
        });
        this.addCommand({
            id: 'joinLines',
            name: 'Join lines',
            hotkeys: [
                {
                    modifiers: ['Mod'],
                    key: 'J',
                },
            ],
            editorCallback: (editor) => joinLines(editor),
        });
        this.addCommand({
            id: 'duplicateLine',
            name: 'Duplicate line',
            hotkeys: [
                {
                    modifiers: ['Mod', 'Shift'],
                    key: 'D',
                },
            ],
            editorCallback: (editor) => duplicateLine(editor),
        });
        this.addCommand({
            id: 'selectWord',
            name: 'Select word',
            editorCallback: (editor) => selectWord(editor),
        });
        this.addCommand({
            id: 'selectLine',
            name: 'Select line',
            hotkeys: [
                {
                    modifiers: ['Mod'],
                    key: 'L',
                },
            ],
            editorCallback: (editor) => selectLine(editor),
        });
        this.addCommand({
            id: 'goToLineStart',
            name: 'Go to start of line',
            editorCallback: (editor) => goToLineBoundary(editor, 'start'),
        });
        this.addCommand({
            id: 'goToLineEnd',
            name: 'Go to end of line',
            editorCallback: (editor) => goToLineBoundary(editor, 'end'),
        });
        this.addCommand({
            id: 'transformToUppercase',
            name: 'Transform selection to uppercase',
            editorCallback: (editor) => transformCase(editor, CASE.UPPER),
        });
        this.addCommand({
            id: 'transformToLowercase',
            name: 'Transform selection to lowercase',
            editorCallback: (editor) => transformCase(editor, CASE.LOWER),
        });
        this.addCommand({
            id: 'transformToTitlecase',
            name: 'Transform selection to title case',
            editorCallback: (editor) => transformCase(editor, CASE.TITLE),
        });
        this.addCommand({
            id: 'expandSelectionToBrackets',
            name: 'Expand selection to brackets',
            editorCallback: (editor) => expandSelectionToBrackets(editor),
        });
        this.addCommand({
            id: 'expandSelectionToQuotes',
            name: 'Expand selection to quotes',
            editorCallback: (editor) => expandSelectionToQuotes(editor),
        });
        this.addCommand({
            id: 'goToNextHeading',
            name: 'Go to next heading',
            editorCallback: (editor) => goToHeading(this.app, editor, 'next'),
        });
        this.addCommand({
            id: 'goToPrevHeading',
            name: 'Go to previous heading',
            editorCallback: (editor) => goToHeading(this.app, editor, 'prev'),
        });
    }
}

module.exports = CodeEditorShortcuts;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
